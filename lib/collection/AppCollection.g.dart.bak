// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'AppCollection.dart';

// **************************************************************************
// CollectionPartGenerator
// **************************************************************************

class _AppCollection implements AppCollection {
  _AppCollection(SonicDb db) {
    this.db = db;
    var entityApp = Map();
    entityApp['name'] = 'apps';
    entityApp['fields'] = Map();
    var entityApp_id = Map();
    entityApp_id['primaryKey'] = true;
    entityApp_id['autoGenerated'] = true;
    entityApp_id['name'] = '_id';
    entityApp_id['type'] = 'integer';
    entityApp['fields']['id'] = entityApp_id;
    var entityApp_packageName = Map();
    entityApp_packageName['name'] = 'package_name';
    entityApp_packageName['type'] = 'text';
    entityApp['fields']['packageName'] = entityApp_packageName;
    var entityApp_appName = Map();
    entityApp_appName['name'] = 'name';
    entityApp_appName['type'] = 'text';
    entityApp['fields']['appName'] = entityApp_appName;
    var entityApp_dayVolume = Map();
    entityApp_dayVolume['name'] = 'day_volume';
    entityApp_dayVolume['type'] = 'integer';
    entityApp['fields']['dayVolume'] = entityApp_dayVolume;
    var entityApp_nightVolume = Map();
    entityApp_nightVolume['name'] = 'night_volume';
    entityApp_nightVolume['type'] = 'integer';
    entityApp['fields']['nightVolume'] = entityApp_nightVolume;
    var entityApp_dayBrightness = Map();
    entityApp_dayBrightness['name'] = 'day_brightness';
    entityApp_dayBrightness['type'] = 'integer';
    entityApp['fields']['dayBrightness'] = entityApp_dayBrightness;
    var entityApp_nightBrightness = Map();
    entityApp_nightBrightness['name'] = 'night_brightness';
    entityApp_nightBrightness['type'] = 'integer';
    entityApp['fields']['nightBrightness'] = entityApp_nightBrightness;
    var entityApp_icon = Map();
    entityApp_icon['name'] = 'icon';
    entityApp_icon['type'] = 'blob';
    entityApp['fields']['icon'] = entityApp_icon;
    _entity = entityApp;
  }

  late SonicDb db;

  Map _entity = Map();

  @override
  Future<List<App>> getApps() async {
    var db = this.db;
    await db.open();
    var results = await db.query('select * from apps');
    if (results is List) {
      var list = <App>[];
      for (var item in results) {
        var listItem = App(value: item);
        list.add(listItem);
      }
      return list;
    }
    await db.close();
    return [];
  }

  @override
  Future<App?> getApp(packageName) async {
    var db = this.db;
    await db.open();
    var results = await db
        .query('select * from apps where package_name = "$packageName"');
    if (results is List) {
      return App(value: results[0]);
    } else if (results is Map) {
      return App(value: results);
    } else {
      throw Exception('cannot convert received data to type App');
    }
  }

  @override
  Future<int> getDayVolume(packageName) async {
    var db = this.db;
    await db.open();
    var results = await db.query(
        'select day_volume from apps where package_name = "$packageName"');
    if (results is List) {
      var item = results[0];
      if (item is Map && item.keys.length == 1) {
        return item[item.keys.first];
      } else {
        return 0;
      }
    } else if (results is Map && results.keys.length == 1) {
      return results[results.keys.first];
    } else {
      return results as int;
    }
  }

  @override
  Future<dynamic> updateDayVolume(packageName, dayVolume) async {
    var db = this.db;
    var tableName = _entity['name'];
    var whereClause = [];
    var value = Map();
    whereClause.add('package_name = "$packageName"');
    value['day_volume'] = dayVolume;
    await db.open();
    var results = await db.update(tableName, value, whereClause.join(' AND '));
    await db.close();
    return results;
  }

  @override
  Future<dynamic> updateNightVolume(packageName, nightVolume) async {
    var db = this.db;
    var tableName = _entity['name'];
    var whereClause = [];
    var value = Map();
    whereClause.add('package_name = "$packageName"');
    value['night_volume'] = nightVolume;
    await db.open();
    var results = await db.update(tableName, value, whereClause.join(' AND '));
    await db.close();
    return results;
  }

  @override
  Future<dynamic> updateDayBrightness(packageName, dayBrightness) async {
    var db = this.db;
    var tableName = _entity['name'];
    var whereClause = [];
    var value = Map();
    whereClause.add('package_name = "$packageName"');
    value['day_brightness'] = dayBrightness;
    await db.open();
    var results = await db.update(tableName, value, whereClause.join(' AND '));
    await db.close();
    return results;
  }

  @override
  Future<dynamic> updateNightBrightness(packageName, nightBrightness) async {
    var db = this.db;
    var tableName = _entity['name'];
    var whereClause = [];
    var value = Map();
    whereClause.add('package_name = "$packageName"');
    value['night_brightness'] = nightBrightness;
    await db.open();
    var results = await db.update(tableName, value, whereClause.join(' AND '));
    await db.close();
    return results;
  }

  @override
  UpdateOperation update() {
    var db = this.db;
    var tableName = _entity['name'];
    return UpdateOperation(db, tableName, _entity);
  }

  @override
  Future<dynamic> add(app) async {
    var db = this.db;
    var tableName = _entity['name'];
    var data = app.toMap();
    await db.open();
    await db.insert(tableName, data);
    await db.close();
  }

  @override
  Future<dynamic> addAll(apps) async {
    var db = this.db;
    var tableName = _entity['name'];
    List<Map> data = apps.map((item) => item.toMap()).toList();
    await db.open();
    await db.insertAll(tableName, data);
    await db.close();
  }
}
